-- ELIMINACION DE TABLAS
DROP TABLE AEROPUERTO;
DROP TABLE AVION;
DROP TABLE BOLETA;
DROP TABLE CIUDAD;
DROP TABLE CLIENTE;
DROP TABLE CREDITO;
DROP TABLE DEBITO;
DROP TABLE DESTINO;
DROP TABLE DETALLE_COMPRA;
DROP TABLE ENCUESTA;
DROP TABLE FORMA_PAGO;
DROP TABLE ITINERARIO;
DROP TABLE ORIGEN;
DROP TABLE PAIS;
DROP TABLE PASAJE;
DROP TABLE PASAJERO;
DROP TABLE VUELO;
DROP TABLE BANCO;
DROP TABLE CARRITO;

-- CREACION DE TABLAS
CREATE TABLE AEROPUERTO
(
	ID_AEROPUERTO NVARCHAR2(50) NOT NULL,
	DIRECCION NVARCHAR2(50),
	CIUDAD NVARCHAR2(50),
	NOMBRE NVARCHAR2(50)
);

CREATE TABLE AVION
(
	ID_AVION NVARCHAR2(50) NOT NULL,
	MODELO NVARCHAR2(50),
	CAPACIDAD NUMBER,
	ANIO DATE
);

CREATE TABLE BOLETA
(
	ID_BOLETA NVARCHAR2(50) NOT NULL,
	CLIENTE NVARCHAR2(50),
	FECHA DATE,
	HORA NUMBER,
	TOTAL NUMBER CHECK(TOTAL>0),
	ESTADO NVARCHAR2(50),
	FORMA_DE_PAGO NVARCHAR2(50)
);

CREATE TABLE CIUDAD
(
	ID_CIUDAD NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	PAIS NVARCHAR2(50)
);

CREATE TABLE CLIENTE
(
	ID_CLIENTE NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	APELLIDO NVARCHAR2(50),
	FECHA_NACIMIENTO DATE,
	GENERO NVARCHAR2(50),
	TIPO_DOCUMENTO NVARCHAR2(50),
	FECHA_VENCIMIENTO_DOCUMENTO DATE,
	NUMERO_DOCUMENTO NUMBER,
	NACIONALIDAD NVARCHAR2(50), 
	PAIS NVARCHAR2(50),
	TELEFONO NVARCHAR2(50) UNIQUE,
	EMAIL NVARCHAR2(50) UNIQUE,
	CONSTRASENA NVARCHAR2(50)
);

CREATE TABLE CREDITO
(
	ID_CREDITO NVARCHAR2(50) NOT NULL,
	N_TARJETA NVARCHAR2(50) UNIQUE,
	FECHA_CADUCIDAD DATE,
	CVV NVARCHAR2(50),
	N_CUOTAS NUMBER,
	NOMBRE_TITULAR NVARCHAR2(50),
	CALLE NVARCHAR2(50),
	NUMERO NVARCHAR2(50),
	CIUDAD NVARCHAR2(50),
	PAIS NVARCHAR2(50),
	CUPO NUMBER,
	CUPO_UTILIZADO NUMBER,
	CUPO_DISPONIBLE NUMBER
);

CREATE TABLE DEBITO
(
	ID_DEBITO NVARCHAR2(50) NOT NULL,
	BANCO NVARCHAR2(50),
	RUT NVARCHAR2(50),
	N_TARJETA NVARCHAR2(50) UNIQUE,
	CONTRASENA NVARCHAR2(50),
	SALDO NUMBER,
	SALDO_UTILIZADO NUMBER,
	SALDO_DISPONIBLE NUMBER
);

CREATE TABLE BANCO
(
	ID_PAGO NVARCHAR2(50) NOT NULL,
	ID_BANCO NVARCHAR2(50)
);

CREATE TABLE DESTINO
(
	ID_DESTINO NVARCHAR2(50) NOT NULL,
	AEROPUERTO NVARCHAR2(50)
);

CREATE TABLE DETALLE_COMPRA
(
	ID_BOLETA NVARCHAR2(50) NOT NULL,
	PASAJE NVARCHAR2(50),
	TASAS NUMBER,
	CANTIDAD NVARCHAR2(50),
	PRECIO_UNITARIO NUMBER,
	TOTAL_DETALLE NUMBER
);

CREATE TABLE ENCUESTA
(
	ID_ENCUESTA NVARCHAR2(50) NOT NULL,
	ID_BOLETA NVARCHAR2(50),
	VALORACION NVARCHAR2(50),
	SUGERENCIA NVARCHAR2(50)
);

CREATE TABLE FORMA_PAGO
(
	ID_PAGO NVARCHAR2(50) NOT NULL,
	TOTAL_PAGO NUMBER,
	ID_BOLETA NVARCHAR2(50),
	ESTADO NVARCHAR2(50)
);

CREATE TABLE ITINERARIO
(
	ID_ITINERARIO NVARCHAR2(50) NOT NULL,
	HORA_LLEGADA NVARCHAR2(50),
	HORA_SALIDA NVARCHAR2(50),
	FECHA_LLEGADA DATE,
	FECHA_SALIDA DATE,
	ORIGEN NVARCHAR2(50),
	DESTINO NVARCHAR2(50)
);

CREATE TABLE ORIGEN
(
	ID_ORIGEN NVARCHAR2(50) NOT NULL,
	AEROPUERTO NVARCHAR2(50)
);

CREATE TABLE PAIS
(
	ID_PAIS NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50)
);

CREATE TABLE PASAJE
(
	ID_PASAJE NVARCHAR2(50) NOT NULL,
	CLASE NVARCHAR2(50),
	ASIENTO NVARCHAR2(50),
	VALOR NUMBER,
	VUELO NVARCHAR2(50),
	PASAJERO NVARCHAR2(50),
	DESCUENTO NUMBER
);

CREATE TABLE PASAJERO
(
	ID_PASAJERO NVARCHAR2(50) NOT NULL,
	NOMBRE NVARCHAR2(50),
	APELLIDO NVARCHAR2(50),
	FECHA_NACIMIENTO DATE,
	DOCUMENTO NVARCHAR2(50),
	N_DOCUMENTO NVARCHAR2(50),
	N_TELEFONO NVARCHAR2(50) UNIQUE,
	CORREO NVARCHAR2(50) UNIQUE,
	GENERO NVARCHAR2(50)
);

CREATE TABLE VUELO
(
	ID_VUELO NVARCHAR2(50) NOT NULL,
	CAPACIDAD NUMBER,
	NUMERO_VUELO NVARCHAR2(50),
	AVION NVARCHAR2(50),
	ITINERARIO NVARCHAR2(50)
);

CREATE TABLE CARRITO
(
	ID_PASAJE NVARCHAR2(50) NOT NULL,
	ID_CLIENTE NVARCHAR2(50) NOT NULL,
	CANTIDAD NUMBER,
	PRECIO_UNITARIO NUMBER
);

-- DEFINICION DE CLAVES PRIMARIAS
ALTER TABLE AEROPUERTO ADD CONSTRAINT PK_AEROPUERTO PRIMARY KEY (ID_AEROPUERTO);
ALTER TABLE AVION ADD CONSTRAINT PK_AVION PRIMARY KEY (ID_AVION);
ALTER TABLE BOLETA ADD CONSTRAINT PK_BOLETA PRIMARY KEY (ID_BOLETA);
ALTER TABLE CIUDAD ADD CONSTRAINT PK_CIUDAD PRIMARY KEY (ID_CIUDAD);
ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE);
ALTER TABLE CREDITO ADD CONSTRAINT PK_CREDITO PRIMARY KEY (ID_CREDITO);
ALTER TABLE DEBITO ADD CONSTRAINT PK_DEBITO PRIMARY KEY (ID_DEBITO);
ALTER TABLE DESTINO ADD CONSTRAINT PK_DESTINO PRIMARY KEY (ID_DESTINO);
ALTER TABLE DETALLE_COMPRA ADD CONSTRAINT PK_DETALLE_COMPRA PRIMARY KEY (ID_BOLETA,PASAJE);
ALTER TABLE ENCUESTA ADD CONSTRAINT PK_ENCUESTA PRIMARY KEY (ID_ENCUESTA,ID_BOLETA);
ALTER TABLE FORMA_PAGO ADD CONSTRAINT PK_FORMA_PAGO PRIMARY KEY (ID_PAGO,ID_BOLETA);
ALTER TABLE ITINERARIO ADD CONSTRAINT PK_ITINERARIO PRIMARY KEY (ID_ITINERARIO);
ALTER TABLE ORIGEN ADD CONSTRAINT PK_ORIGEN PRIMARY KEY (ID_ORIGEN);
ALTER TABLE PAIS ADD CONSTRAINT PK_PAIS PRIMARY KEY (ID_PAIS);
ALTER TABLE PASAJE ADD CONSTRAINT PK_PASAJE PRIMARY KEY (ID_PASAJE);
ALTER TABLE PASAJERO ADD CONSTRAINT PK_PASAJERO PRIMARY KEY (ID_PASAJERO);
ALTER TABLE VUELO ADD CONSTRAINT PK_VUELO PRIMARY KEY (ID_VUELO);
ALTER TABLE CARRITO ADD CONSTRAINT PK_CARRITO PRIMARY KEY (ID_PASAJE,ID_CLIENTE);
ALTER TABLE BANCO ADD CONSTRAINT PK_BANCO PRIMARY KEY (ID_BANCO,ID_PAGO);

-- DEFINICION DE CLAVES FORANEAS
ALTER TABLE BOLETA ADD CONSTRAINT FK_BOLETA_CLIENTE FOREIGN KEY (CLIENTE) REFERENCES CLIENTE (ID_CLIENTE) ON DELETE CASCADE;
ALTER TABLE FORMA_PAGO ADD CONSTRAINT FK_PAGO_BOLETA FOREIGN KEY (ID_BOLETA) REFERENCES BOLETA (ID_BOLETA) ON DELETE CASCADE;
ALTER TABLE DETALLE_COMPRA ADD CONSTRAINT FK_DETALLE_BOLETA FOREIGN KEY (ID_BOLETA) REFERENCES BOLETA (ID_BOLETA) ON DELETE CASCADE;
ALTER TABLE DETALLE_COMPRA ADD CONSTRAINT FK_DETALLE_PASAJE FOREIGN KEY (PASAJE) REFERENCES PASAJE (ID_PASAJE) ON DELETE CASCADE;
ALTER TABLE ENCUESTA ADD CONSTRAINT FK_ENCUESTA_BOLETA FOREIGN KEY (ID_BOLETA) REFERENCES BOLETA (ID_BOLETA) ON DELETE CASCADE;
ALTER TABLE CARRITO ADD CONSTRAINT FK_CARRITO_PASAJE FOREIGN KEY (ID_PASAJE) REFERENCES PASAJE (ID_PASAJE) ON DELETE CASCADE;
ALTER TABLE CARRITO ADD CONSTRAINT FK_CARRITO_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE) ON DELETE CASCADE;
ALTER TABLE PASAJE ADD CONSTRAINT FK_PASAJE_VUELO FOREIGN KEY (VUELO) REFERENCES VUELO (ID_VUELO) ON DELETE CASCADE;
ALTER TABLE PASAJE ADD CONSTRAINT FK_PASAJE_PASAJERO FOREIGN KEY (PASAJERO) REFERENCES PASAJERO (ID_PASAJERO) ON DELETE CASCADE;
ALTER TABLE VUELO ADD CONSTRAINT FK_VUELO_AVION FOREIGN KEY (AVION) REFERENCES AVION (ID_AVION) ON DELETE CASCADE;
ALTER TABLE VUELO ADD CONSTRAINT FK_VUELO_ITINERARIO FOREIGN KEY (ITINERARIO) REFERENCES ITINERARIO (ID_ITINERARIO) ON DELETE CASCADE;
ALTER TABLE ITINERARIO ADD CONSTRAINT FK_ITINERARIO_DESTINO FOREIGN KEY (DESTINO) REFERENCES DESTINO (ID_DESTINO) ON DELETE CASCADE;
ALTER TABLE ITINERARIO ADD CONSTRAINT FK_ITINERARIO_ORIGEN FOREIGN KEY (ORIGEN) REFERENCES ORIGEN (ID_ORIGEN) ON DELETE CASCADE;
ALTER TABLE DESTINO ADD CONSTRAINT FK_DESTINO_AEROPUERTO FOREIGN KEY (AEROPUERTO) REFERENCES AEROPUERTO (ID_AEROPUERTO) ON DELETE CASCADE;
ALTER TABLE ORIGEN ADD CONSTRAINT FK_ORIGEN_AEROPUERTO FOREIGN KEY (AEROPUERTO) REFERENCES AEROPUERTO (ID_AEROPUERTO) ON DELETE CASCADE;
ALTER TABLE AEROPUERTO ADD CONSTRAINT FK_AEROPUERTO_CIUDAD FOREIGN KEY (CIUDAD) REFERENCES CIUDAD (ID_CIUDAD) ON DELETE CASCADE;
ALTER TABLE CIUDAD ADD CONSTRAINT FK_CIUDAD_PAIS FOREIGN KEY (PAIS) REFERENCES PAIS (ID_PAIS) ON DELETE CASCADE;

ALTER TABLE BANCO ADD CONSTRAINT FK_BANCO_CREDITO FOREIGN KEY (ID_PAGO) REFERENCES CREDITO (ID_CREDITO) ON DELETE CASCADE;
ALTER TABLE BANCO ADD CONSTRAINT FK_BANCO_DEBITO FOREIGN KEY (ID_PAGO) REFERENCES DEBITO (ID_DEBITO) ON DELETE CASCADE;



/*
-- FUNCION
-- FUNCION QUE VALIDA RUT DE CLIENTE
CREATE OR REPLACE FUNCTION ValidaRut
    (
        NUMERICO IN CLIENTE.rut_cliente%TYPE
    )
    RETURN BOOLEAN
IS
    TRUE_RUT VARCHAR2 (9);
    DIGITO NUMBER := 0;
    SUMA NUMBER := 0;
    DIGITOF NUMBER := 0; 
    LARGO NUMBER := LENGTH(NUMERICO);
BEGIN
    IF (LARGO = 8) THEN
        TRUE_RUT := LPAD (NUMERICO,9,'0');
    ELSE
        TRUE_RUT := NUMERICO;
    END IF;

    DIGITO := SUBSTR (TRUE_RUT,9,1);
    SUMA := SUBSTR (TRUE_RUT,1,1) * 3;
    SUMA := (SUMA + SUBSTR (TRUE_RUT,2,1) * 2);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,3,1) * 7);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,4,1) * 6);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,5,1) * 5);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,6,1) * 4);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,7,1) * 3);
    SUMA := (SUMA + SUBSTR (TRUE_RUT,8,1) * 2);

    WHILE (SUMA > 11) LOOP
    SUMA := SUMA -11;    
    END LOOP;
    
    DIGITOF := (11 - SUMA);

    IF (DIGITOF = 10) THEN
        DIGITOF := 0;
    END IF;

    IF (DIGITOF = DIGITO) THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;

-- PROCEDIMIENTOS DE INSERCION
-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA CLIENTE
CREATE OR REPLACE PROCEDURE InsertarCliente
(
    rut_cliente IN CLIENTE.rut_cliente%TYPE,
    nombre IN CLIENTE.nombre%TYPE,
    paterno IN CLIENTE.paterno%TYPE,
    materno IN CLIENTE.materno%TYPE,
    direccion IN CLIENTE.direccion%TYPE,
    correo IN CLIENTE.correo%TYPE
)
IS 
    VALIDAR EXCEPTION;
    RETORNO BOOLEAN;
BEGIN 
    RETORNO := ValidaRut(rut_cliente);
    IF (RETORNO = TRUE) THEN
        LOCK TABLE CLIENTE IN ROW EXCLUSIVE MODE;
        INSERT INTO CLIENTE 
        VALUES (rut_cliente,nombre,paterno,materno,direccion,correo);
        COMMIT;
    ELSE 
        DBMS_OUTPUT.PUT_LINE('EL RUT NO ES VALIDO'); 
        RAISE VALIDAR;
        
    END IF;

    EXCEPTION 
        WHEN VALIDAR THEN
            DBMS_OUTPUT.PUT_LINE('EL RUT NO ES VALIDO'); 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SURGIO OTRO ERROR');
            ROLLBACK;
END InsertarCliente;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA VENDEDOR
CREATE OR REPLACE PROCEDURE InsertarVendedor
(
    rut_vendedor IN VENDEDOR.rut_vendedor%TYPE,
    nombre IN VENDEDOR.nombre%TYPE,
    paterno IN VENDEDOR.paterno%TYPE,
    materno IN VENDEDOR.materno%TYPE,
    correo IN VENDEDOR.correo%TYPE
)
IS
    VALIDAR EXCEPTION;
    RETORNO BOOLEAN;
BEGIN 
    RETORNO := ValidaRut(rut_vendedor);
    IF (RETORNO = TRUE) THEN
            LOCK TABLE VENDEDOR IN ROW EXCLUSIVE MODE;
            INSERT INTO VENDEDOR 
            VALUES (rut_vendedor,nombre,paterno,materno,correo);
            COMMIT;
    ELSE
        RAISE VALIDAR;    
    END IF;

    EXCEPTION 
        WHEN VALIDAR THEN
            DBMS_OUTPUT.PUT_LINE('EL RUT NO ES VALIDO'); 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SURGIO OTRO ERROR');
            ROLLBACK;
END InsertarVendedor;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA ARTICULO
CREATE OR REPLACE PROCEDURE InsertarArticulo
(
    num_articulo IN ARTICULO.num_articulo%TYPE,
    nombre IN ARTICULO.nombre%TYPE,
    categoria IN ARTICULO.categoria%TYPE,
    stock IN ARTICULO.stock%TYPE,
    precio IN ARTICULO.precio%TYPE
)
IS
    VALIDAR EXCEPTION;
    BUSQUEDA NUMBER;
BEGIN 
    LOCK TABLE ARTICULO IN ROW EXCLUSIVE MODE;
    INSERT INTO ARTICULO 
    VALUES (num_articulo,nombre,categoria,stock,precio);
    COMMIT;    

   EXCEPTION 
        WHEN VALIDAR THEN
            DBMS_OUTPUT.PUT_LINE('EL ARTICULO YA EXISTE'); 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SURGIO OTRO ERROR');
            ROLLBACK;
END InsertarArticulo;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA SUCURSAL
CREATE OR REPLACE PROCEDURE InsertarSucursal
(
    id_sucursal IN SUCURSAL.id_sucursal %TYPE,
    nombre IN SUCURSAL.nombre %TYPE,
    direccion IN SUCURSAL.direccion %TYPE,
    region IN SUCURSAL.region %TYPE,
    comuna IN SUCURSAL.comuna %TYPE
)
IS 
    VALIDAR NUMBER;
    VALIDA1 EXCEPTION;
BEGIN
    IF (VALIDAR = LENGTH (id_sucursal)) THEN
        RAISE VALIDA1;
    ELSE
        LOCK TABLE SUCURSAL IN ROW EXCLUSIVE MODE;
        INSERT INTO SUCURSAL
        VALUES (id_sucursal,nombre,direccion,region,comuna);
        COMMIT;
    END IF;

    EXCEPTION
        WHEN VALIDA1 THEN
            DBMS_OUTPUT.PUT_LINE('EL ID DEBE SER DISTINTO DE CERO'); 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SURGIO OTRO ERROR');
            ROLLBACK;
END InsertarSucursal;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA BOLETA
CREATE OR REPLACE PROCEDURE InsertarBoleta
(
    num_boleta  IN BOLETA.num_boleta %TYPE,
    sucursal IN BOLETA.sucursal %TYPE,
    vendedor IN BOLETA.vendedor %TYPE,
    cliente IN BOLETA.cliente %TYPE
)
IS 
    VALIDAR NUMBER;
    VALIDA1 EXCEPTION;
BEGIN 
    IF (VALIDAR = LENGTH (num_boleta)) THEN
        RAISE VALIDA1;
    ELSE
        LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
        INSERT INTO BOLETA
        VALUES (num_boleta,sucursal,vendedor,sysdate,cliente,'0','0');
        COMMIT;
    END IF;
    
    EXCEPTION
        WHEN VALIDA1 THEN
            DBMS_OUTPUT.PUT_LINE('EL NUMERO DE BOLETA DEBE SER DISTINTO DE CERO'); 
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('SURGIO OTRO ERROR');
            ROLLBACK;
END InsertarBoleta;

-- CREACION DE PROCEDIMIENTO PARA INSERTAR DATOS A LA TABLA DETALLE
CREATE OR REPLACE PROCEDURE InsertarDetalle
(
    num_boleta IN DETALLE.num_boleta %TYPE,
    num_articulo  IN DETALLE.num_articulo %TYPE,
    cantidad IN DETALLE.cantidad %TYPE
)
IS 
BEGIN 
    LOCK TABLE DETALLE IN ROW EXCLUSIVE MODE;
    INSERT INTO DETALLE
    VALUES (num_boleta,num_articulo,cantidad,0);
    COMMIT;
END InsertarDetalle;


-- INSERCION DE DATOS A LA TABLA CLIENTE MEDIANTE EL PROCEDIMIENTO INSERTARCLIENTE
Call InsertarCliente ('174974063','LUIS','PINO','PINO','AV COLIN 104','LUIS@HOTMAIL.COM');
Call InsertarCliente ('191065093','ANDRES','CERPA','ORTEGA','23 ORIENTE A 12','DERPIX@HOTMAIL.COM');
Call InsertarCliente ('108592796','JAIME','FIGUEROA','JORQUERA','3 SUR 1 1313','JFIG@HOTMAIL.COM');
Call InsertarCliente ('168461666','FELIPE','SEPULVEDA','ORTEGA','PONIENTE 1','FELIPONSIO@GMAIL.COM');
Call InsertarCliente ('190837122','ANTONIA','JORQUERA','JORQUERA','LAS REJAS 4','JORK@HOTMAIL.COM');
Call InsertarCliente ('125155642','CAMILA','SILVA','JORQUERA','NORTE SN','CAMIWI@HOTMAIL.COM');
Call InsertarCliente ('190187772','ANDREA','FLORES','ORTEGA','AV SIEMPRE VIVA','ORTE@GMAIL.COM');
Call InsertarCliente ('104640524','JAVIERA','ORTEGA','PINO','LAS RASTRAS 443','JAVIISFREE@HOTMAIL.COM');
-- INSERCION DE DATOS A LA TABLA VENDEDOR MEDIANTE EL PROCEDIMIENTO INSERTARVENDEDOR
Call InsertarVendedor ('198523798','MARTIN','PURCHES','ORTEGA','SOPAIPILLA@GMAIL.COM');
Call InsertarVendedor ('190448010','ALFONSO','JORQUERA','SAGAL','CONMOSTAZA@HOTMAIL.COM');
Call InsertarVendedor ('217535646','DANIELA','SILVA','SANCHEZ','TANGANANICA@HOTMAIL.COM');
Call InsertarVendedor ('136135198','ISIDORA','FLORES','GUTIERREZ','TANGANANA@GMAIL.COM');
Call InsertarVendedor ('159827372','JAVIERA','MALLEA','PINO','ELMARAVILLA@HOTMAIL.COM');
-- INSERCION DE DATOS A LA TABLA ARTICULO MEDIANTE EL PROCEDIMIENTO INSERTARARTICULO
Call InsertarArticulo ('1','GUANTE','PROTECCION','10','50000');
Call InsertarArticulo ('2','NEBLINERO LED','REPUESTO','12','16000');
Call InsertarArticulo ('3','NEUMATICO','REPUESTO','20','80000');
Call InsertarArticulo ('4','CASCO','PROTECCION','50','150000');
Call InsertarArticulo ('5','POLERA','VESTIMENTA','11','14000');
Call InsertarArticulo ('6','CADENA','REPUESTO','1','20000');
Call InsertarArticulo ('7','MANILLA','ACCESORIO','15','5000');
-- INSERCION DE DATOS A LA TABLA SUCURSAL MEDIANTE EL PROCEDIMIENTO INSERTARSUCURSAL
Call InsertarSucursal('911','MALL PLAZA','AV SAN MIGUEL','MAULE','TALCA');
Call InsertarSucursal('11','MALL TREBOL','AV LOS PASTOS','METROPOLITANA','QUILICURA');
Call InsertarSucursal('91','MALL PLAZA LA SERENA','CALLE FALSA SN','MAULE','TALCA');
-- INSERCION DE DATOS A LA TABLA BOLETA MEDIANTE EL PROCEDIMIENTO INSERTARBOLETA
Call InsertarBoleta('1','911','198523798','168461666');
Call InsertarBoleta('2','91','136135198','125155642');
Call InsertarBoleta('3','91','198523798','168461666');
Call InsertarBoleta('4','11','136135198','125155642');
Call InsertarBoleta('5','11','159827372','168461666');
-- INSERCION DE DATOS A LA TABLA DETALLE MEDIANTE EL PROCEDIMIENTO INSERTARDETALLE
Call InsertarDetalle('1','1',2);
Call InsertarDetalle('1','2',2);
Call InsertarDetalle('2','3',2);
Call InsertarDetalle('2','1',1);
Call InsertarDetalle('3','2',4);
Call InsertarDetalle('3','3',5);
Call InsertarDetalle('3','4',2);
Call InsertarDetalle('4','5',3);
Call InsertarDetalle('5','6',4);
Call InsertarDetalle('5','7',5);
Call InsertarDetalle('5','1',1);
Call InsertarDetalle('5','2',2);

SET SERVEROUTPUT ON;

CREATE TABLE AUDITORIA_ARTICULOS
(
    ID  NVARCHAR2(10),
    ACCION NVARCHAR2 (50),
    FECHA DATE,
    USUARIO NVARCHAR2 (50)
);
--1
CREATE OR REPLACE TRIGGER AUD_INS_ART
AFTER INSERT ON ARTICULO
FOR EACH ROW
DECLARE
    V_NOMBRE_USUARIO VARCHAR2(50);
    V_FECHA DATE;
BEGIN
    SELECT USER INTO V_NOMBRE_USUARIO FROM DUAL;
    SELECT SYSDATE INTO V_FECHA FROM DUAL;
    INSERT INTO AUDITORIA_ARTICULOS(ID,ACCION,FECHA,USUARIO) 
    VALUES ('ART-I-'||:NEW.num_articulo,'SE HA INSERTADO '||:NEW.NOMBRE,V_FECHA,V_NOMBRE_USUARIO);
END;
--2
CREATE OR REPLACE TRIGGER AUD_BOR_ART
BEFORE DELETE ON ARTICULO
FOR EACH ROW
DECLARE
    V_NOMBRE_USUARIO VARCHAR2(50);
    V_FECHA DATE;
BEGIN
    SELECT USER INTO V_NOMBRE_USUARIO 
    FROM DUAL;
    SELECT SYSDATE INTO V_FECHA 
    FROM DUAL;
    INSERT INTO AUDITORIA_ARTICULOS(ID,ACCION,FECHA,USUARIO) 
    VALUES ('ART-B-'||:OLD.num_articulo,'SE HA BORRADO '||:OLD.NOMBRE,V_FECHA,V_NOMBRE_USUARIO);
END;
--3
CREATE OR REPLACE TRIGGER AUD_ACT_ART
BEFORE UPDATE ON ARTICULO
FOR EACH ROW
DECLARE
    V_NOMBRE_USUARIO VARCHAR2(50);
    V_FECHA DATE;
BEGIN
    SELECT USER INTO V_NOMBRE_USUARIO FROM DUAL;
    SELECT SYSDATE INTO V_FECHA FROM DUAL;
    INSERT INTO AUDITORIA_ARTICULOS(ID,ACCION,FECHA,USUARIO) 
    VALUES ('ART-M-'||:OLD.num_articulo,'SE HA ACTUALIZADO '||:OLD.NOMBRE,V_FECHA,V_NOMBRE_USUARIO);
END;
--4
CREATE OR REPLACE TRIGGER MAYUSCULA_CLIENTE
BEFORE INSERT ON CLIENTE
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.PATERNO := UPPER(:NEW.PATERNO);
    :NEW.MATERNO := UPPER(:NEW.MATERNO);
    :NEW.DIRECCION := UPPER (:NEW.DIRECCION);
    :NEW.CORREO := UPPER (:NEW.CORREO);
END;
--5
CREATE OR REPLACE TRIGGER MAYUSCULA_VENDEDOR
BEFORE INSERT ON VENDEDOR
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.PATERNO := UPPER(:NEW.PATERNO);
    :NEW.MATERNO := UPPER(:NEW.MATERNO);
    :NEW.CORREO := UPPER (:NEW.CORREO);
END;
--6
CREATE OR REPLACE TRIGGER MAYUSCULA_ARTICULO
BEFORE INSERT ON ARTICULO
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.CATEGORIA := UPPER(:NEW.CATEGORIA);
END;
--7
CREATE OR REPLACE TRIGGER MAYUSCULA_SUCURSAL
BEFORE INSERT ON SUCURSAL
FOR EACH ROW
DECLARE
BEGIN
    :NEW.NOMBRE := UPPER(:NEW.NOMBRE);
    :NEW.DIRECCION := UPPER(:NEW.DIRECCION);
    :NEW.REGION := UPPER(:NEW.REGION);
    :NEW.COMUNA := UPPER (:NEW.COMUNA);
END;
--8
CREATE OR REPLACE TRIGGER INS_TOTAL_DETALLE
BEFORE INSERT ON DETALLE
FOR EACH ROW 
DECLARE
    PRECIO NUMBER;
BEGIN
    SELECT PRECIO
    INTO PRECIO
    FROM ARTICULO
    WHERE NUM_ARTICULO = :NEW.NUM_ARTICULO;
    :NEW.TOTAL_DETALLE := :NEW.CANTIDAD * PRECIO;
END;
-- 9
CREATE OR REPLACE TRIGGER MOD_TOTAL_DETALLE
BEFORE UPDATE ON DETALLE
FOR EACH ROW 
DECLARE
    PRECIO NUMBER;
BEGIN
    SELECT PRECIO
    INTO PRECIO
    FROM ARTICULO
    WHERE NUM_ARTICULO = :NEW.NUM_ARTICULO;
    :NEW.TOTAL_DETALLE := :NEW.CANTIDAD * PRECIO;
END;



INSERT INTO ARTICULO(num_articulo, nombre, categoria, stock, precio)
    VALUES ('561','CELULAR','TECNO',2,150000);

DELETE FROM ARTICULO 
    WHERE NOMBRE = CELULAR;

UPDATE ARTICULO SET STOCK=5 
    WHERE nombre='CELULAR';

SELECT * FROM CLIENTE;

INSERT INTO CLIENTE(RUT_CLIENTE, NOMBRE, PATERNO, MATERNO, DIRECCION, CORREO) 
    VALUES ('11302186K','seba','cerpa','gutierrez','30 ote','s@GMAIL.COM');

DELETE FROM CLIENTE 
    WHERE NOMBRE = 'SEBA';

-------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER ACTUALIZAR_BOLETA
AFTER INSERT ON DETALLE
FOR EACH ROW
DECLARE 
BEGIN
    UPDATE BOLETA SET TOTAL= TOTAL + :NEW.TOTAL WHERE CODIGO_BOLETA = :NEW.CODIGO_BOLETA;
END;


    
CREATE OR REPLACE TRIGGER ACTUALIZAR_BOLETA
AFTER INSERT ON DETALLE
FOR EACH ROW
DECLARE
  
BEGIN
    UPDATE PRODUCTO SET STOCK = STOCK - :NEW.CANTIDAD WHERE
    UPDATE BOLETA SET TOTAL= TOTAL + :NEW.TOTAL WHERE CODIGO_BOLETA = :NEW.CODIGO_BOLETA;
END;


-- Realice un trigger que permita ajustar el total de la tabla detalle de acuerdo a la cantidad del producto que se inserta.


*/